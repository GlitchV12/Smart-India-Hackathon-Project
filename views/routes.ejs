<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Routes Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f6f9;
            color: #333;
        }

        /* header {
            background: linear-gradient(135deg, #007bff, #6610f2);
            color: #fff;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        } */

        header h1 {
            font-size: 2rem;
            font-weight: 700;
        }

        .container {
            width: 85%;
            margin: 40px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .input-group {
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

        .input-group input {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 30%;
            margin-bottom: 10px;
            flex-grow: 1;
            max-width: 30%;
            margin-right: 10px;
        }

        .input-group button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #28a745;
            color: #fff;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .input-group button:hover {
            background-color: #218838;
        }

        #map {
            height: 500px;
            width: 100%;
            border-radius: 5px;
            margin-top: 20px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        #directions-panel {
            margin-top: 20px;
            padding: 20px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

        #warning {
            color: red;
            font-weight: bold;
            margin-top: 20px;
        }

        .map-icon {
            color: #007bff;
            font-size: 24px;
            margin-right: 10px;
        }

        .btn-primary {
            background-color: #6610f2;
            border-color: #6610f2;
            border-radius: 50px;
            padding: 0.75rem 1.5rem;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #520dc2;
            border-color: #520dc2;
        }
    </style>
</head>

<body>
    <!-- <header>
        <a href="/"
            style="color: rgb(255, 255, 255);border: 2px solid white;padding: 5px;border-radius: 3px;float: left;text-decoration: none;">&#8592;
            Home</a>
        <h1>Bus Route Management</h1>
    </header> -->

    <nav class="navbar fixed-top navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/" style="font-weight: 700;">&#10094; Route Runner</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText"
                aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarText">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/api/schedules">Schedules</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/api/report">Report</a>
                    </li>
                </ul>
                <span class="navbar-text-end">
                    <a class="btn btn-primary" href="/api/signup">Sign Up</a>
                </span>
            </div>
        </div>
    </nav>

    <div class="container" style="margin-top: 80px;">
        <form action="/api/routes" method="POST">
            <div class="input-group">
                <input id="routename" name="routename" type="text" placeholder="Enter route name">
                <input id="start" name="start" type="text" placeholder="Enter start location">
                <input id="end" name="end" type="text" placeholder="Enter end location">
                <button onclick="calculateRoute()">
                    <i class="fas fa-route map-icon"></i> Add Route
                </button>
            </div>
        </form>
        <div id="map"></div>
        <div id="directions-panel"></div>
        <div id="warning"></div>
    </div>

    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDdchqimkN-x83vjbBj5Qqdvz1uHCuumSw&libraries=places"></script>
    <script>
        let map, directionsService, directionsRenderer, existingRoutes = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 7,
                center: { lat: 40.748817, lng: -73.985428 } // Default location
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById('directions-panel'));
        }

        function calculateRoute() {
            const routeName = document.getElementById('routename').value;
            const start = document.getElementById('start').value;
            const end = document.getElementById('end').value;

            if (!routeName || !start || !end) {
                alert('Please fill out all fields.');
                return;
            }

            directionsService.route({
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            }, (response, status) => {
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                    const routePath = response.routes[0].overview_path;
                    const routeCoords = routePath.map(coord => ({ lat: coord.lat(), lng: coord.lng() }));

                    if (checkOverlap(routeCoords)) {
                        document.getElementById('warning').innerText = 'Warning: This route overlaps with an existing route!';
                    } else {
                        document.getElementById('warning').innerText = '';
                        existingRoutes.push(routeCoords);
                        // Save routeName and routeCoords to your database or data structure
                    }
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function checkOverlap(newRoute) {
            for (let route of existingRoutes) {
                for (let i = 0; i < newRoute.length - 1; i++) {
                    for (let j = 0; j < route.length - 1; j++) {
                        if (linesIntersect(newRoute[i], newRoute[i + 1], route[j], route[j + 1])) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        function linesIntersect(p1, p2, q1, q2) {
            function ccw(a, b, c) {
                return (c.lng - a.lng) * (b.lat - a.lat) > (b.lng - a.lng) * (c.lat - a.lat);
            }
            return ccw(p1, q1, q2) !== ccw(p2, q1, q2) && ccw(p1, p2, q1) !== ccw(p1, p2, q2);
        }

        window.onload = initMap;
    </script>
</body>

</html>